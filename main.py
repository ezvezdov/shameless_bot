import json
from time import sleep
from os import path, remove
import telebot
from telebot import types
from datetime import datetime

# https://github.com/eternnoir/pyTelegramBotAPI
# https://habr.com/ru/post/442800/
# https://xakep.ru/2021/11/28/python-telegram-bots/


with open(path.join('data',"old_data.json"), "w") as outfile:
        json.dump(dict(), outfile)

logfile = open(path.join('data',"log.txt"), "w")

# create telegram bot
bot = telebot.TeleBot("5617663897:AAF6gy49rlq5lVSNCM2MbZMCUQMSR8WjNO4")
channel_address = "@pausal_delux"

is_bot_working = True
refresh_frequency = 60 # in seconds
is_bot_started = False
start_time = 0


# Add /help command
@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.send_message(message.chat.id,"–ê–≥–æ–π –∫–∞–º–æ, –∫—Ä—á –≤—Å–µ –ø—Ä–æ—Å—Ç–æ. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç —á–µ–∫–∞—Ç—å –≤–µ–± —à–µ–π–º–ª–µ—Å—Å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—á–Ω—ã—Ö –ø–∞—É—à–∞–ª—å—á–∏–∫–æ–≤, —á—Ç–æ–±—ã —Å –∫–∞–π—Ñ–æ–º –≥–æ–¥—å–∫—É –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –ø–æ–π—Ç–∏ —Å–ø–∞—Ç—å —Å –∫–∞–π—Ñ–æ–º. –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –¥–æ–±–∞–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è —Å–º–µ–Ω–∞ –∏–ª–∏ –∫—Ç–æ-—Ç–æ –æ–¥–≥–ª–∞—Å–∏–ª—Å—è —Å–æ —Å—Ç–∞—Ä–æ–π. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –ø–æ –ø–∏–∑–¥–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start. –ö–æ–º–∞–Ω–¥–∞ /jobs –ø–æ–∫–∞–∑—ã–∞–µ—Ç –≤—Å–µ –ø–∞—É—à–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.",parse_mode= 'Markdown')

# Add /jobs command
@bot.message_handler(commands=['jobs'])
def work_list(message):
    import parse_data as pada
    import refactor_data as reda
    import update_data as upda
    pada.generate_data()
    reda.generate_refactored_data()
    upda.update_data()
    bot.send_message(message.chat.id, upda.get_all_works(),parse_mode= 'Markdown')

@bot.message_handler(commands=['info'])
def send_info_message(message):
    message_to_send = ""
    global is_bot_working, refresh_frequency, start_time
    message_to_send += "*–°–æ—Å—Ç–æ—è–Ω–∏–µ*: –ø—Ä–∞—Ü—É–µ\n" if is_bot_working else "*–°–æ—Å—Ç–æ—è–Ω–∏–µ*: –Ω–µ–ø—Ä–∞—Ü—É–µ\n"
    message_to_send = message_to_send + "*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã*: " + strfdelta(datetime.now() - start_time,"{days} –¥–Ω–µ–π, {hours}:{minutes}:{seconds}\n")
    message_to_send = message_to_send + "*–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è*: " + str(refresh_frequency) + " —Å–µ–∫—É–Ω–¥\n"
    bot.send_message(message.chat.id, message_to_send,parse_mode= 'Markdown')
    bot.send_sticker(message.chat.id, sticker="CAACAgIAAxkBAAEYWOBjLNdmC5dclv0jBbXmPPlpUa-q_AACChIAAs0C6EvjoLPI5axr9CkE")
    

def strfdelta(tdelta, fmt):
    d = {"days": tdelta.days}
    d["hours"], rem = divmod(tdelta.seconds, 3600)
    d["minutes"], d["seconds"] = divmod(rem, 60)
    
    d["hours"] = format(d["hours"], '02d')
    d["minutes"] = format(d["minutes"], '02d')
    d["seconds"] = format(d["seconds"], '02d')
    return fmt.format(**d)


# Add /stop command
@bot.message_handler(commands=['stop'])
def stop_bot(message):
    try: remove(path.join("data","parsed_data.json"))
    except: pass
    try: remove(path.join("data","refactored_data.json"))
    except: pass
    global is_bot_working
    is_bot_working = False
    bot.send_message(message.chat.id, "–ß—É—Å –±—É—Å –∞–≤—Ç–æ–±—É—Å. I'll be  back üòé",parse_mode= 'Markdown')
    bot.send_sticker(message.chat.id, sticker='CAACAgIAAxkBAAEYWM5jLNUtmN7S293meV95TtQQn61L3gAC3BIAAvMNqUj9BaNVQlopLikE')

@bot.message_handler(commands=['continue'])
def stop_bot(message):
    global is_bot_working
    is_bot_working = True
    bot.send_message(message.chat.id, "–Ø –∂–µ –≥–æ–≤–æ—Ä–∏–ª, —á—Ç–æ –≤–µ—Ä–Ω—É—Å—å üòé",parse_mode= 'Markdown')

# Add /start command
@bot.message_handler(commands=['start'])
def send_update(message):
    global is_bot_started,is_bot_working,start_time
    if is_bot_started:
        bot.send_message(message.chat.id, "–ó–∞—á–µ–º –º–µ–Ω—è –∑–∞–ø—É—Å–∫–∞—Ç—å, –µ—Å–ª–∏ —è —É–∂–µ –∑–∞–ø—É—â–µ–Ω ü§®",parse_mode= 'Markdown')
        return
    # global is_bot_working
    is_bot_working = True
    # global start_time
    start_time = datetime.now()

    # Add telegram buttons
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    help_button = types.KeyboardButton("/help")
    start_button = types.KeyboardButton("/start")
    stop_button = types.KeyboardButton("/stop")
    jobs_button = types.KeyboardButton("/jobs")
    info_button = types.KeyboardButton("/info")
    continue_button = types.KeyboardButton("/continue")
    markup.add(help_button,start_button,stop_button,continue_button,info_button,jobs_button)

    bot.send_message(message.chat.id, "–ß—É—Å, –∑–∞ –ø–∞—É—à–∞–ª—å—á–∏–∫–∞–º–∏ –ø—Ä–∏—à–µ–ª, –º–º–º? –°–æ–≤–µ—Ç—É—é –≥–ª—è–Ω—É—Ç—å —Ä–∞–∑–¥–µ–ª /help",reply_markup=markup,parse_mode= 'Markdown')
    bot.send_sticker(message.chat.id, sticker="CAACAgIAAxkBAAEYWNxjLNaqnB_SFteoZArPZxE8VwKyMgACBBcAAs_q6UvdZbGbN2nnbikE")
    
    import parse_data as pada
    import refactor_data as reda
    import update_data as upda
    while True:
        global refresh_frequency
        if is_bot_working:
            try:
                pada.generate_data()
            except Exception as e:
                bot.send_message(message.chat.id, "–ö–æ—Ä–æ—á–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –∑–∞–ª—É–ø–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å —Å–µ—Ä–≤–µ—Ä–æ–º —à–µ–π–º–ª–µ—Å—Å. –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞. –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ \'" + e + "\'.",reply_markup=markup,parse_mode= 'Markdown')
            reda.generate_refactored_data()
            upda.update_data()
            message_to_send = upda.get_new_works()
            if message_to_send != upda.NO_JOBS_MESSAGE or not is_bot_started:
                bot.send_message(message.chat.id, message_to_send,parse_mode= 'Markdown')
                is_bot_started = True
        sleep(refresh_frequency)

    

bot.infinity_polling()

